一、添加远程库
  现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步。
  gitbub上Create a new repo
#在本地的learngit仓库下运行命令
git remote add origin git@github.com:fantasticqiang/docs.git
#我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
#从现在起，只要本地作了提交，就可以通过命令：
git push origin master
#把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！
#用命令git clone克隆一个本地库
 git clone git@github.com:michaelliao/gitskills.git
二、创建合并分支
#创建分支dev,然后切换到dev分支
git branch dev
git checkout dev
#合并命令,创建并切换
git checkout -b dev
#查看所有的分支，当前分支前面会标一个*号。
git branch
#修改库中一个文件后提交
git add readme.txt
git commit -m "branch test"
#dev分支的工作完成，我们就可以切换回master分支：
git checkout master
#我们把dev分支的工作成果合并到master分支上：
git merge dev
#合并完成后，就可以放心地删除dev分支了：
git branch -d dev
#Git友情提醒，feature-vulcan分支还没有被合并，如果删除，
#将丢失掉修改，如果要强行删除，需要使用命令
git branch -D feature-vulcan
三、解决冲突
#修改后保存，再提交
git add readme.txt
git commit -m "conflict fixed"
#使用带有参数的git log查看分支的合并情况
git log -graph --pretty=oneline --abbrev-commit

#git合并分支时，会使用fast forward模式，删除分支后，会丢掉分支信息
#以下命令合并dev分支，表示禁用fast forward
git merge --no-ff -m "merge with mo-ff" dev
#git log 查看分支信息
git log --graph

#Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
git stash
#git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
#一种方式是用git stash pop，恢复的同时把stash内容也删了：

# git fetch：相当于是从远程获取最新版本到本地，不会自动merge
git fentch origin master


